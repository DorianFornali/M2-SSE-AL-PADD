services:
  nats:
    image: nats:latest
    container_name: nats_cluster
    ports:
      - 4222:4222
      - 6222:6222
      - 8222:8222
    networks:
      - net
    environment:
      - NATS_CLUSTER_NAME = nats_cluster      
    restart: always

  pgsql:
    image: postgres:16
    ports:
      - ${DB_PORT:-5432}:5432
    environment:
      PGPASSWORD: ${DB_PASSWORD:-secret}
      POSTGRES_DB: ${DB_DATABASE:-default}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-secret}
    volumes:
      - vpgsql:/var/lib/postgresql/data
    networks:
      - net
    restart: always
    healthcheck:
      test: ["CMD", "pg_isready", "-q", "-d", "${DB_DATABASE:-default}", "-U", "${DB_USER}"]
      retries: 3
      timeout: 5s
  
  user-service:
    image: user-service
    extra_hosts:
      - "host.docker.internal:host-gateway"
    build:
      context: ./backend/user-service
      dockerfile: Dockerfile
    env_file:
      - ./backend/user-service/.env
    environment:
      - NODE_ENV=${USER_SERVICE_BUILD_TARGET:-production}
      - HOST=0.0.0.0
      - DB_HOST=pgsql
      - DB_PORT=${DB_PORT:-5432}
      - DB_DATABASE=${DB_DATABASE:-default}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD:-secret}
    restart: always
    volumes:
      - ./backend/user-service:/app
      - /app/node_modules
      - /app/build
    depends_on:
      pgsql:
        condition: service_healthy
    networks:
      - net

  alert-service:
    image: alert-service
    build:
      context: ./backend/alert-service
      dockerfile: Dockerfile
    depends_on:
      pgsql:
        condition: service_healthy
    restart: always
    networks:
      - net

  notification-service:
    image: notification-service 
    build:
      context: ./backend/notification-service
      dockerfile: Dockerfile
    environment:
      - NATS_URL=nats://nats:4222
      - NODE_ENV=${USER_SERVICE_BUILD_TARGET:-production}
      - HOST=0.0.0.0
      - DB_HOST=pgsql
      - DB_PORT=${DB_PORT:-5432}
      - DB_DATABASE=${DB_DATABASE:-default}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD:-secret}
    ports:
      - 8086:8086
    restart: always
    networks:
      - net
    depends_on:
      pgsql:
        condition: service_healthy
      mailpit:
        condition: service_healthy


  mailpit:
    image: "axllent/mailpit:latest"
    ports:
      - "${MAIL_EXT_PORT:-1025}:1025"
      - "${MAILSPIT_DASHBOARD_PORT:-8025}:8025"
    environment:
      TZ: "Europe/Paris"
    restart: unless-stopped
    networks:
      - net

  data-service:
    image: data-service
    extra_hosts:
      - "host.docker.internal:host-gateway"
    ports:
      - 8087:8087
    build:
      context: ./backend/data-service
      dockerfile: Dockerfile
    environment:
      - HOST=0.0.0.0
      - DB_HOST=pgsql
      - DB_PORT=${DB_PORT:-5432}
      - DB_DATABASE=${DB_DATABASE:-default}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD:-secret}
    restart: always
    depends_on:
      pgsql:
        condition: service_healthy
    networks:
      - net

  frontend:
    image: frontend
    build:
      context: ./frontend
      dockerfile: Dockerfile
    environment:
      NODE_ENV: ${FRONTEND_BUILD_TARGET:-production}
      VITE_FRONTEND_GATEWAY_URL: ${FRONTEND_GATEWAY_URL:-http://localhost}
    ports:
      - 3000:3000
    depends_on:
      - gateway
  
  gateway:
    image: nginx:latest
    ports:
      - 80:80
    volumes:
      - ./backend/gateway/nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - pgsql
      - user-service
      - data-service
      - alert-service
    networks:
      - net
    
networks:
  net:
    driver: bridge

volumes:
  vpgsql:
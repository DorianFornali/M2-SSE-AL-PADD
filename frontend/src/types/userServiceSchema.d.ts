/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/health': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     *  (checkHealth)
     * @description Returns **200** (OK) as **text/plain**
     *
     *      _app/controllers/health_controller.ts_ - **checkHealth**
     */
    get: operations['checkHealth']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/auth/register': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     *  (register)
     * @description Register a new user
     *
     *      _app/controllers/auth_controller.ts_ - **register**
     */
    post: operations['register']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/auth/login': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     *  (login)
     * @description Log in a user
     *
     *      _app/controllers/auth_controller.ts_ - **login**
     */
    post: operations['login']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/auth/logout': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     *  (logout)
     * @description Log out the current user using the access token in the Authorization header (Bearer ${token})
     *
     *      _app/controllers/auth_controller.ts_ - **logout**
     */
    post: operations['logout']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/auth/me': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     *  (me)
     * @description Returns **200** (OK) as **application/json**
     *
     *      _app/controllers/auth_controller.ts_ - **me**
     */
    get: operations['me']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/users': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get a list of  (index)
     * @description
     *
     *      _app/controllers/users_controller.ts_ - **index**
     */
    get: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Returns **401** (Unauthorized) */
        401: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
        /** @description Returns **403** (Forbidden) */
        403: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/users/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get a single instance of :id (show)
     * @description
     *
     *      _app/controllers/users_controller.ts_ - **show**
     */
    get: {
      parameters: {
        query?: never
        header?: never
        path: {
          id: string
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Returns **401** (Unauthorized) */
        401: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
        /** @description Returns **403** (Forbidden) */
        403: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
      }
    }
    /**
     * Update :id (update)
     * @description
     *
     *      _app/controllers/users_controller.ts_ - **update**
     */
    put: {
      parameters: {
        query?: never
        header?: never
        path: {
          id: string
        }
        cookie?: never
      }
      requestBody?: {
        content: {
          'application/json': unknown
        }
      }
      responses: {
        /** @description Returns **401** (Unauthorized) */
        401: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
        /** @description Returns **403** (Forbidden) */
        403: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
      }
    }
    post?: never
    /**
     * Delete :id (destroy)
     * @description
     *
     *      _app/controllers/users_controller.ts_ - **destroy**
     */
    delete: {
      parameters: {
        query?: never
        header?: never
        path: {
          id: string
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Returns **401** (Unauthorized) */
        401: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
        /** @description Returns **403** (Forbidden) */
        403: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
      }
    }
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/relations/{id}/patients': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     *  (getPatients)
     * @description Returns **200** (OK) as **application/json**
     *
     *      _app/controllers/user_relations_controller.ts_ - **getPatients**
     */
    get: operations['getPatients']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/relations/{id}/related-users': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     *  (getRelatedUsers)
     * @description Returns **200** (OK) as **application/json**
     *
     *      _app/controllers/user_relations_controller.ts_ - **getRelatedUsers**
     */
    get: operations['getRelatedUsers']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/relations/link': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     *  (linkPatient)
     * @description Link a patient to a doctor, nurse, or relative
     *
     *      _app/controllers/user_relations_controller.ts_ - **linkPatient**
     */
    post: operations['linkPatient']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/relations/unlink': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     *  (unlinkPatient)
     * @description Unlink a patient from a doctor, nurse, or relative
     *
     *      _app/controllers/user_relations_controller.ts_ - **unlinkPatient**
     */
    post: operations['unlinkPatient']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
}
export type webhooks = Record<string, never>
export interface components {
  schemas: {
    /** @description Any JSON object not defined as schema */
    Any: unknown
    PaginationMeta: {
      /** @example 100 */
      total?: number
      /** @example 2 */
      page?: number
      /** @example 10 */
      perPage?: number
      /** @example 3 */
      currentPage?: number
      /** @example 10 */
      lastPage?: number
      /** @example 1 */
      firstPage?: number
      /** @example /?page=10 */
      lastPageUrl?: string
      /** @example /?page=1 */
      firstPageUrl?: string
      /** @example /?page=6 */
      nextPageUrl?: string
      /** @example /?page=5 */
      previousPageUrl?: string
    }
    /** @description TokenInterface (Interface) */
    TokenInterface: {
      /** @example Lorem Ipsum */
      type?: string
      /** @example John Doe */
      name?: string
      /** @example Lorem Ipsum */
      token?: string
      abilities?: string[]
      /** @example Lorem Ipsum */
      lastUsedAt?: string
      /** @example Lorem Ipsum */
      expiresAt?: string
    }
    /** @description LoginResponseInterface (Interface) */
    LoginResponseInterface: {
      /** @example null */
      user?: components['schemas']['User']
      /** @example null */
      token?: components['schemas']['TokenInterface']
      /** @example Lorem Ipsum */
      success?: string
    }
    /** @description Patient (Interface) */
    Patient: {
      /** @example 967 */
      id?: number
      /** @example 367 */
      userId?: number
      /** @example 767 */
      relatedUserId?: number
      /** @example Lorem Ipsum */
      relationType?: string
      /** @example Lorem Ipsum */
      createdAt?: string
      /** @example Lorem Ipsum */
      updatedAt?: string
      /** @example null */
      user?: components['schemas']['User']
    }
    /** @description GetPatientsResponseInterface (Interface) */
    GetPatientsResponseInterface: {
      patients?: components['schemas']['Patient'][]
      /** @example Lorem Ipsum */
      success?: string
    }
    /** @description User (Model) */
    User: {
      /** @example 204 */
      id?: number
      /** @example John */
      firstName?: string
      /** @example Doe */
      lastName?: string
      /**
       * Format: email
       * @example johndoe@example.com
       */
      email?: string
      /** @example Lorem Ipsum */
      phoneNumber?: string
      /** @example 1028 Farland Street */
      address?: string
      /** @example Lorem Ipsum */
      birthDate?: string
      /**
       * @example 'PATIENT'
       * @enum {string}
       */
      role?: "'PATIENT'" | "'RELATIVE'" | "'DOCTOR'" | "'NURSE'" | "'ADMIN'"
      patients?: components['schemas']['UserRelation'][]
      doctor?: components['schemas']['UserRelation'][]
      nurse?: components['schemas']['UserRelation'][]
      relatives?: components['schemas']['UserRelation'][]
      /**
       * Format: date-time
       * @example 2021-03-23T16:13:08.489+01:00
       */
      createdAt?: string
      /**
       * Format: date-time
       * @example 2021-03-23T16:13:08.489+01:00
       */
      updatedAt?: string
    }
    /** @description UserRelation (Model) */
    UserRelation: {
      /** @example 758 */
      id?: number
      /** @example 688 */
      userId?: number
      /** @example 908 */
      relatedUserId?: number
      /**
       * @example 'DOCTOR'
       * @enum {string}
       */
      relationType?: "'DOCTOR'" | "'NURSE'" | "'RELATIVE'"
      /** @example null */
      user?: components['schemas']['User']
      /** @example null */
      relatedUser?: components['schemas']['User']
      /**
       * Format: date-time
       * @example 2021-03-23T16:13:08.489+01:00
       */
      createdAt?: string
      /**
       * Format: date-time
       * @example 2021-03-23T16:13:08.489+01:00
       */
      updatedAt?: string
    }
    /**
     * @description loginValidator (Validator)
     * @example {
     *       "email": "Lorem Ipsum",
     *       "password": "Lorem Ipsum"
     *     }
     */
    loginValidator: {
      /** @example Lorem Ipsum */
      email?: string
      /** @example Lorem Ipsum */
      password?: string
    }
    /**
     * @description registerValidator (Validator)
     * @example {
     *       "email": "Lorem Ipsum",
     *       "password": "Lorem Ipsum",
     *       "first_name": "Lorem Ipsum",
     *       "last_name": "Lorem Ipsum",
     *       "phone_number": "Lorem Ipsum",
     *       "address": "Lorem Ipsum",
     *       "birth_date": "Lorem Ipsum",
     *       "role": 141
     *     }
     */
    registerValidator: {
      /** @example Lorem Ipsum */
      email?: string
      /** @example Lorem Ipsum */
      password?: string
      /** @example Lorem Ipsum */
      first_name?: string
      /** @example Lorem Ipsum */
      last_name?: string
      /** @example Lorem Ipsum */
      phone_number?: string
      /** @example Lorem Ipsum */
      address?: string
      /** @example Lorem Ipsum */
      birth_date?: string
      /** @example 141 */
      role?: number
    }
    /**
     * @description getPatientsValidator (Validator)
     * @example {
     *       "id": 578
     *     }
     */
    getPatientsValidator: {
      /** @example 578 */
      id?: number
    }
    /**
     * @description getRelationsValidator (Validator)
     * @example {
     *       "id": 25
     *     }
     */
    getRelationsValidator: {
      /** @example 25 */
      id?: number
    }
    /**
     * @description linkValidator (Validator)
     * @example {
     *       "patientId": 620,
     *       "relatedUserId": 896,
     *       "relationType": 576
     *     }
     */
    linkValidator: {
      /** @example 620 */
      patientId?: number
      /** @example 896 */
      relatedUserId?: number
      /** @example 576 */
      relationType?: number
    }
    /**
     * @description unlinkValidator (Validator)
     * @example {
     *       "patientId": 975,
     *       "relatedUserId": 903,
     *       "relationType": 676
     *     }
     */
    unlinkValidator: {
      /** @example 975 */
      patientId?: number
      /** @example 903 */
      relatedUserId?: number
      /** @example 676 */
      relationType?: number
    }
    /**
     * @description deleteValidator (Validator)
     * @example {
     *       "id": 191
     *     }
     */
    deleteValidator: {
      /** @example 191 */
      id?: number
    }
    /**
     * @description listingValidator (Validator)
     * @example {
     *       "page": 164,
     *       "limit": 776,
     *       "role": 372
     *     }
     */
    listingValidator: {
      /** @example 164 */
      page?: number
      /** @example 776 */
      limit?: number
      /** @example 372 */
      role?: number
    }
    /**
     * @description showValidator (Validator)
     * @example {
     *       "id": 658
     *     }
     */
    showValidator: {
      /** @example 658 */
      id?: number
    }
    /**
     * @description updateValidator (Validator)
     * @example {
     *       "id": 593
     *     }
     */
    updateValidator: {
      /** @example 593 */
      id?: number
    }
    /**
     * @description updateValidatorBody (Validator)
     * @example {
     *       "firstName": "Lorem Ipsum",
     *       "lastName": "Lorem Ipsum",
     *       "email": "Lorem Ipsum",
     *       "phoneNumber": "Lorem Ipsum",
     *       "address": "Lorem Ipsum",
     *       "birthDate": "Lorem Ipsum",
     *       "role": 95
     *     }
     */
    updateValidatorBody: {
      /** @example Lorem Ipsum */
      firstName?: string
      /** @example Lorem Ipsum */
      lastName?: string
      /** @example Lorem Ipsum */
      email?: string
      /** @example Lorem Ipsum */
      phoneNumber?: string
      /** @example Lorem Ipsum */
      address?: string
      /** @example Lorem Ipsum */
      birthDate?: string
      /** @example 95 */
      role?: number
    }
  }
  responses: {
    /** @description Access token is missing or invalid */
    Forbidden: {
      headers: {
        [name: string]: unknown
      }
      content?: never
    }
    /** @description The request was accepted */
    Accepted: {
      headers: {
        [name: string]: unknown
      }
      content?: never
    }
    /** @description The resource has been created */
    Created: {
      headers: {
        [name: string]: unknown
      }
      content?: never
    }
    /** @description The resource has been created */
    NotFound: {
      headers: {
        [name: string]: unknown
      }
      content?: never
    }
    /** @description The resource has been created */
    NotAcceptable: {
      headers: {
        [name: string]: unknown
      }
      content?: never
    }
  }
  parameters: never
  requestBodies: never
  headers: never
  pathItems: never
}
export type $defs = Record<string, never>
export interface operations {
  checkHealth: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Returns **200** (OK) as **text/plain** */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'text/plain': unknown
        }
      }
    }
  }
  register: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: {
      content: {
        /** @example {
         *       "email": "Lorem Ipsum",
         *       "password": "Lorem Ipsum",
         *       "first_name": "Lorem Ipsum",
         *       "last_name": "Lorem Ipsum",
         *       "phone_number": "Lorem Ipsum",
         *       "address": "Lorem Ipsum",
         *       "birth_date": "Lorem Ipsum",
         *       "role": 141
         *     } */
        'application/json': components['schemas']['registerValidator']
      }
    }
    responses: {
      /** @description Returns **200** (OK) as **application/json** */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['User']
        }
      }
    }
  }
  login: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: {
      content: {
        /** @example {
         *       "email": "Lorem Ipsum",
         *       "password": "Lorem Ipsum"
         *     } */
        'application/json': components['schemas']['loginValidator']
      }
    }
    responses: {
      /** @description Returns **200** (OK) as **application/json** */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['LoginResponseInterface']
        }
      }
    }
  }
  logout: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Returns **401** (Unauthorized) */
      401: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Returns **403** (Forbidden) */
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  me: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Returns **200** (OK) as **application/json** */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['User']
        }
      }
      /** @description Returns **401** (Unauthorized) */
      401: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Returns **403** (Forbidden) */
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  getPatients: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Returns **200** (OK) as **application/json** */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['GetPatientsResponseInterface']
        }
      }
      /** @description Returns **401** (Unauthorized) */
      401: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Returns **403** (Forbidden) */
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  getRelatedUsers: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Returns **200** (OK) as **application/json** */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['UserRelation']
        }
      }
      /** @description Returns **401** (Unauthorized) */
      401: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Returns **403** (Forbidden) */
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  linkPatient: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: {
      content: {
        /** @example {
         *       "patientId": 620,
         *       "relatedUserId": 896,
         *       "relationType": 576
         *     } */
        'application/json': components['schemas']['linkValidator']
      }
    }
    responses: {
      /** @description Returns **200** (OK) as **application/json** */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['UserRelation']
        }
      }
      /** @description Returns **401** (Unauthorized) */
      401: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Returns **403** (Forbidden) */
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  unlinkPatient: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: {
      content: {
        /** @example {
         *       "patientId": 975,
         *       "relatedUserId": 903,
         *       "relationType": 676
         *     } */
        'application/json': components['schemas']['unlinkValidator']
      }
    }
    responses: {
      /** @description Returns **200** (OK) as **application/json** */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['UserRelation']
        }
      }
      /** @description Returns **401** (Unauthorized) */
      401: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Returns **403** (Forbidden) */
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
}
